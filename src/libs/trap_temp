
#define UPDATE_TRAP "update traps \
                                    set \
                                      servergroup_name='%s', \
                                      servergroup_notify=%d, \
                                      servergroup_active=%d, \
                                      servergroup_members='%s', \
                                      servergroup_dead=%d, \
                                      enabled_triggers='%s', \
                                      orch_id=%d \
                                    where \
                                      trap_id=%ld"

#define DEL_TRAP "delete from traps where trap_id=%d"
#define ADD_TRAP "INSERT INTO \
                                      traps( \
                                          servergroup_name, \
                                          servergroup_notify, \
                                          servergroup_active, \
                                          servergroup_members, \
                                          servergroup_dead, \
                                          enabled_triggers, \
                                          orch_id \
                                        ) \
                                      VALUES( \
                                          '%s', \
                                          %d, \
                                          %d, \
                                          '%s', \
                                          %d, \
                                          '%s', \
                                          '%d' \
                                      )"

#define TRAP_SEL "select \
                            servergroup_id, \
                            servergroup_name, \
                            servergroup_notify, \
                            servergroup_active, \
                            servergroup_members, \
                            servergroup_dead, \
                            enabled_triggers, \
                            orch_id  \
                          from \
                            traps %s"



#define TRAP_SELECTOR "select \
                            servergroup_id, \
                            servergroup_name, \
                            servergroup_notify, \
                            servergroup_active, \
                            servergroup_members, \
                            servergroup_dead, \
                            enabled_triggers, \
                            orch_id  \
                          from \
                            trap where servergroup_id=%ld"

                            


#define TRAP_CHANGE_ID "update traps set trap_id=%d where trap_id=%d"


int AddTrap(struct trap * svc, char *config) {
  
  MYSQL *mysql;
  int rtc;
  
  char * sqlupd;
  


  char * mysql_host = getConfigValue("mysql_host", config);
  char * mysql_user = getConfigValue("mysql_user", config);
  char * mysql_pw = getConfigValue("mysql_pw", config);
  char * mysql_db = getConfigValue("mysql_db", config);

  mysql=mysql_init(NULL);
    CHK_ERR(mysql,NULL);
  mysql=mysql_real_connect(mysql, mysql_host, mysql_user, mysql_pw, NULL, 0, NULL, 0);
    CHK_ERR(mysql,NULL);
  mysql_select_db(mysql, mysql_db);
          CHK_ERR(mysql,NULL);
  
  
  CHECKED_ASPRINTF(&sqlupd, ADD_TRAP, svc->servergroup_name, svc->servergroup_notify, svc->servergroup_active, svc->servergroup_members, svc->servergroup_dead, svc->enabled_triggers, svc->orch_id);
  
  

  mysql_query(mysql, sqlupd);
    CHK_ERR(mysql,NULL);
  
  
  free(sqlupd);
  rtc=mysql_insert_id(mysql);
  mysql_close(mysql);
    
  free(mysql_host);
  free(mysql_user);
  free(mysql_pw);
  free(mysql_db);
  
  return rtc; 
} 


int DeleteTrap(int trap_id, char * config) {
  
  MYSQL *mysql;

  
  char * sqlupd;
  


  char * mysql_host = getConfigValue("mysql_host", config);
  char * mysql_user = getConfigValue("mysql_user", config);
  char * mysql_pw = getConfigValue("mysql_pw", config);
  char * mysql_db = getConfigValue("mysql_db", config);

  mysql=mysql_init(NULL);
    CHK_ERR(mysql,NULL);
  mysql=mysql_real_connect(mysql, mysql_host, mysql_user, mysql_pw, NULL, 0, NULL, 0);
    CHK_ERR(mysql,NULL);
  mysql_select_db(mysql, mysql_db);
          CHK_ERR(mysql,NULL);
  
  
  CHECKED_ASPRINTF(&sqlupd, DEL_TRAP, servergroup_id);
  
  //Log("dbg", sqlupd);
  
  mysql_query(mysql, sqlupd);
    CHK_ERR(mysql,NULL);
  
  
  free(sqlupd);
  
  mysql_close(mysql);
    
  free(mysql_host);
  free(mysql_user);
  free(mysql_pw);
  free(mysql_db);
  
  return 1;   
  
  
}

int UpdateTrap(struct trap * svc, char *config) {
  /*
    modify worker
  */
  MYSQL *mysql;
  int rtc;
  
  char * sqlupd;
  


  char * mysql_host = getConfigValue("mysql_host", config);
  char * mysql_user = getConfigValue("mysql_user", config);
  char * mysql_pw = getConfigValue("mysql_pw", config);
  char * mysql_db = getConfigValue("mysql_db", config);

  mysql=mysql_init(NULL);
    CHK_ERR(mysql,NULL);
  mysql=mysql_real_connect(mysql, mysql_host, mysql_user, mysql_pw, NULL, 0, NULL, 0);
    CHK_ERR(mysql,NULL);
  mysql_select_db(mysql, mysql_db);
          CHK_ERR(mysql,NULL);
  
  
  
  CHECKED_ASPRINTF(&sqlupd, UPDATE_TRAP, svc->servergroup_name, svc->servergroup_notify, svc->servergroup_active, svc->servergroup_members,svc->servergroup_dead,svc->enabled_triggers,svc->orch_id, svc->servergroup_id);
  
  
  
  mysql_query(mysql, sqlupd);
    CHK_ERR(mysql,NULL);
  
  
  free(sqlupd);
  rtc=1;
  mysql_close(mysql);
    
  free(mysql_host);
  free(mysql_user);
  free(mysql_pw);
  free(mysql_db);
  
  return rtc; 
}

int TrapChangeId(int from, int to, char * config) {
  MYSQL *mysql;
  
  
  char * sqlupd;
  


  char * mysql_host = getConfigValue("mysql_host", config);
  char * mysql_user = getConfigValue("mysql_user", config);
  char * mysql_pw = getConfigValue("mysql_pw", config);
  char * mysql_db = getConfigValue("mysql_db", config);

  mysql=mysql_init(NULL);
    CHK_ERR(mysql,NULL);
  mysql=mysql_real_connect(mysql, mysql_host, mysql_user, mysql_pw, NULL, 0, NULL, 0);
    CHK_ERR(mysql,NULL);
  mysql_select_db(mysql, mysql_db);
          CHK_ERR(mysql,NULL);
  
  
  CHECKED_ASPRINTF(&sqlupd, TRAP_CHANGE_ID, to, from);
  
  
  
  mysql_query(mysql, sqlupd);
    CHK_ERR(mysql,NULL);
      
  free(sqlupd);
    
  
  mysql_close(mysql);
  free(mysql_host);
  free(mysql_user);
  free(mysql_pw);
  free(mysql_db);
  return to;  
}


int GetTrapById(int trap_id, struct servicegroup * svc, char * config) {
  
  int tmprc;
  MYSQL *mysql;
  MYSQL_ROW  row;
  MYSQL_RES  *res;
  char * sqlupd;
  
  char * mysql_host = getConfigValue("mysql_host", config);
  char * mysql_user = getConfigValue("mysql_user", config);
  char * mysql_pw = getConfigValue("mysql_pw", config);
  char * mysql_db = getConfigValue("mysql_db", config);
  
  
  
  
  
  
  mysql=mysql_init(NULL);
    CHK_ERR(mysql,NULL);
  mysql=mysql_real_connect(mysql, mysql_host, mysql_user, mysql_pw, NULL, 0, NULL, 0);
    CHK_ERR(mysql,NULL);
        mysql_select_db(mysql, mysql_db);
          CHK_ERR(mysql,NULL);
  
  CHECKED_ASPRINTF(&sqlupd, TRAP_SELECTOR, trap_id);
  
  
  mysql_query(mysql, sqlupd);
    CHK_ERR(mysql,NULL);
        res = mysql_store_result(mysql);
          CHK_ERR(mysql,NULL);
        
        
        if(mysql_num_rows(res) == 1 ) {
          row=mysql_fetch_row(res);
            if(row[0] != NULL) {
              svc->servicegroup_id = atol(row[0]);
            } else {
              svc->servicegroup_id = -1;            
            }
            
            if(row[1] != NULL) {
              
              sprintf(svc->servicegroup_name, "%s", row[1]);
            } else {
              sprintf(svc->servicegroup_name, "(null)");            
            }
            if(row[2] != NULL) {
              
              svc->servicegroup_notify = atoi(row[2]);
            } else {
              svc->servicegroup_notify = 1;           
            }
            if(row[3] != NULL) {
              
              svc->servicegroup_active = atoi(row[3]);
            } else {
              svc->servicegroup_active = 1;           
            }
            if(row[4] != NULL) {
              
              sprintf(svc->servicegroup_members, "%s", row[4]);
              if(strcmp(svc->servicegroup_name, "DEFAULT") == 0) {
                sprintf(svc->servicegroup_members, "%s", "");
              }             
            } else {
              sprintf(svc->servicegroup_members, "(null)");             
            }
            if(row[5] != NULL) {
              svc->servicegroup_dead = atoi(row[5]);
            } else{
              svc->servicegroup_dead = 0;
            }
            if(row[6] != NULL) {
              
              sprintf(svc->enabled_triggers, "%s", row[6]);
            } else {
              sprintf(svc->enabled_triggers, "%s", "");            
            }
            
            svc->orch_id=atoi(row[7]);      



          tmprc=0;
        } else {
          tmprc=-1;
        }
  
  
  mysql_free_result(res);
  mysql_close(mysql);
  free(mysql_host);
  free(mysql_user);
  free(mysql_pw);
  free(mysql_db);
  free(sqlupd);
  return tmprc;
    
}

int GetTrapMap(struct trap * svcs, char * config, int orch_id) {
  
  MYSQL *mysql;
  MYSQL_ROW  row;
  MYSQL_RES  *res;
  
  
  char * mysql_host = getConfigValue("mysql_host", config);
  char * mysql_user = getConfigValue("mysql_user", config);
  char * mysql_pw = getConfigValue("mysql_pw", config);
  char * mysql_db = getConfigValue("mysql_db", config);
  int i=0;
  
  char * sql, *where;


  set_cfg(config);
  mysql=mysql_init(NULL);
    CHK_ERR(mysql,NULL);
  mysql=mysql_real_connect(mysql, mysql_host, mysql_user, mysql_pw, NULL, 0, NULL, 0);
    CHK_ERR(mysql,NULL);
        mysql_select_db(mysql, mysql_db);
          CHK_ERR(mysql,NULL);
          

        if(orch_id > 0) {
          CHECKED_ASPRINTF(&where, " where orch_id=%d", orch_id);
        } else {
          CHECKED_ASPRINTF(&where, " ");
        }
        CHECKED_ASPRINTF(&sql, SERVICEGROUP_SEL, where);

        mysql_query(mysql, sql);
    CHK_ERR(mysql,NULL);

    
    free(where);
    free(sql);


  res = mysql_store_result(mysql);
          CHK_ERR(mysql,NULL);
        
        
        if(mysql_num_rows(res) > 0) {
          
          while ( (row=mysql_fetch_row(res)) != NULL) {

        if(row[0] != NULL) {
              
              svcs[i].servicegroup_id = atol(row[0]);
            } else {
              svcs[i].servicegroup_id = -1;           
            }
            
            if(row[1] != NULL) {
              
              sprintf(svcs[i].servicegroup_name, "%s", row[1]);
            } else {
              sprintf(svcs[i].servicegroup_name, "(null)");             
            } 
            if(row[2] != NULL) {
              
              svcs[i].servicegroup_notify = atoi(row[2]);
            } else {
              svcs[i].servicegroup_notify = 1;            
            }
            if(row[3] != NULL) {
              
              svcs[i].servicegroup_active = atoi(row[3]);
            } else {
              svcs[i].servicegroup_active = 1;            
            }
            if(row[4] != NULL) {
              
              sprintf(svcs[i].servicegroup_members, "%s", row[4]);
              
              if(strcmp(svcs[i].servicegroup_name, "DEFAULT") == 0) {
                sprintf(svcs[i].servicegroup_members, "%s", "");
              }  
              
            } else {
              sprintf(svcs[i].servicegroup_members, "(null)");            
            }
            
            if(row[5] != NULL) {
              svcs[i].servicegroup_dead = atoi(row[5]);
            } else{
              svcs[i].servicegroup_dead = 0;
            }
            
            if(row[6] != NULL) {
              sprintf(svcs[i].enabled_triggers, "%s", row[6]);
            } else{
              sprintf(svcs[i].enabled_triggers, " ");
            }
            
            svcs[i].orch_id=atoi(row[7]);
    
            i++;
          }
          
          mysql_free_result(res);
          mysql_close(mysql);
          free(mysql_host);
    free(mysql_user);
    free(mysql_pw);
    free(mysql_db);
          return i;
        } else { 
          _log(LH_LIB, B_LOG_INFO, "no Servicegroups found!");  
        }
  
  
  
  mysql_free_result(res);
  mysql_close(mysql);
  free(mysql_host);
  free(mysql_user);
  free(mysql_pw);
  free(mysql_db);
  
  return -1;
  
  
}