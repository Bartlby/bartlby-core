#!/bin/sh
#########################################
# Bartlby Check Disk
# $Id: bartlby_if,v 1.5 2006/09/10 21:28:16 hjanuschka Exp $ */
#
#
# $Revision: 1.5 $
# $Source: /cvsroot/bartlby/bartlby-plugins/bartlby_if,v $
#
#
#
# $Log: bartlby_if,v $
# Revision 1.5  2006/09/10 21:28:16  hjanuschka
# auto commit
#
# Revision 1.4  2006/09/09 19:38:42  hjanuschka
# auto commit
#
# Revision 1.3  2006/07/23 20:33:17  hjanuschka
# *** empty log message ***
#
# Revision 1.2  2006/05/06 23:54:45  hjanuschka
# check_load define,include errors
#
# Revision 1.1  2005/12/27 20:47:38  hjanuschka
# added bartlby_if (check if net interface is up, and be able to track bandwith with RRD)
# added bartlby_snmp (check and track snmp values)
#
#
#########################################

VERSION="0.1";
MY_PATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
if [ -f $MY_PATH/bartlby.funcs ]; then
	. $MY_PATH/bartlby.funcs
	plg_init_args $*;
	
else
	echo "your setup doesnt look fine cant locate 'bartlby.funcs'";
	exit 2;
fi;

set_my_name "bartlby_if"


has_executable "ifconfig"

plg_get_arg "h" "IS_HELP";
plg_get_arg "p" "PERFIT";
plg_get_arg "i" "CIF";
plg_get_arg "S" "SNMP";
plg_get_arg "C" "SNMP_COMM";
plg_get_arg "H" "SNMP_HOST";
plg_get_arg "v" "SNMP_VER";
plg_get_arg "t" "TRACK";

if [ "$IS_HELP" != "false" ]; 
then
	echo "Bartlby Check Network interface";
	echo "***************************";
	echo "-h Display Help";
	echo "-i Interface (Def: eth0)";
	echo "-t track back how many packs? (default: 5) one is 1 seconds";
	echo "-S use SNMP mode"; 
	echo "  -C Community (default: public)";
	echo "  -H Host (default: localhost)";
	echo "  -i interface index (default: 1)";
	echo "  -v version (default: 1), 1 or 2c";
	echo "-p hit Performance trigger";
	end_warning "";
fi;
if [ "$TRACK" = "false" ];
then
	TRACK="5";
fi;
if [ "$CIF" = "false" ];
then
	CIF="eth0";	
fi;

if [ "$SNMP" = "false" ];
then
	ifconfig $CIF |grep -sq "inet addr"  2>&1 > /dev/null
	if [ $? != 0 ];
	then
		end_critical "interface $CIF is DOWN";
	fi;


	if [ "$PERFIT" != "false" ];
	then
		AETH0=$(grep $CIF /proc/net/dev)
		AE0DOWN=$(echo $AETH0|tr \: \ |awk '{print $2}')
		AE0UP=$(echo $AETH0|tr \: \ |awk '{print $10}')
		echo "PERF: $AE0DOWN $AE0UP last";
		x=0;
		OMSG="";
		until [ "$x" = "$TRACK" ];
		do
			AETH0=$(grep $CIF /proc/net/dev)
			AE0DOWN=$(echo $AETH0|tr \: \ |awk '{print $2}')
			AE0UP=$(echo $AETH0|tr \: \ |awk '{print $10}')
			OMSG="$OMSG D:$AE0DOWN U:$AE0UP ";	
			sleep 1;
			x=$[x+1];
		done;
		MY_OUT_STR=$OMSG;
	fi;
else
	has_executable "snmpget"
	if [ "$SNMP_HOST" = "false" ];
	then
		SNMP_HOST="localhost";
	fi;
	if [ "$SNMP_COMM" = "false" ];
	then
		SNMP_COMM="public";
	fi;
	if [ "$SNMP_VER" = "false" ];
	then
		SNMP_VER="1";
	fi;
	if [ "$CIF" = "eth0" ];
	then
		CIF="1";
	fi;
	#check if link is up
	#  
	#  IF-MIB::ifOperStatus.1 == 1
	o=$(snmpget -t 3 -Oqv -v $SNMP_VER -c $SNMP_COMM $SNMP_HOST IF-MIB::ifOperStatus.$CIF 2>/dev/null);
	if [ $? != 0 ];
	then
		end_critical "snmpquery failed";
	else
		
		if [ "$o" != "up" ];
		then
			desc=$(snmpget -t 3 -Oqv -v $SNMP_VER -c $SNMP_COMM $SNMP_HOST IF-MIB::ifDescr.$CIF 2>/dev/null);
			end_critical "SNMP:interface $desc is DOWN";
		else
			
			in=$(snmpget -t 3 -Oqv -v $SNMP_VER -c $SNMP_COMM $SNMP_HOST IF-MIB::ifInOctets.$CIF 2>/dev/null);
			out=$(snmpget -t 3 -Oqv -v $SNMP_VER -c $SNMP_COMM $SNMP_HOST IF-MIB::ifOutOctets.$CIF 2>/dev/null);
			
			
			if [ "$PERFIT" != "false" ];
			then
				echo "PERF: $in $out last";
			fi;
			OMSG="";
			x=0;
			until [ "$x" = "$TRACK" ];
			do
				in=$(snmpget -t 3 -Oqv -v $SNMP_VER -c $SNMP_COMM $SNMP_HOST IF-MIB::ifInOctets.$CIF 2>/dev/null);
				out=$(snmpget -t 3 -Oqv -v $SNMP_VER -c $SNMP_COMM $SNMP_HOST IF-MIB::ifOutOctets.$CIF 2>/dev/null);
				OMSG="$OMSG D:$in U:$out ";	
				sleep 1;
				x=$[x+1];
			done;
			MY_OUT_STR=$OMSG;
			
		fi;
		
	fi;
	
	
	#get in/out octets
	# 
	# IF-MIB::ifInOctets.1
	# IF-MIB::ifOutOctets.1
	
	
	

fi;

end_ok "$MY_OUT_STR interface $CIF is up";
